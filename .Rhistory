# with(odds_two, lines(seq(2.5, 5, by=.25), exp(fit-1.96*se.fit)/(1+exp(fit-1.96*se.fit)), lty=2))
with(odds_two, polygon(x = c(seq(2.5, 5, by=.25), rev(seq(2.5, 5, by=.25))),
y = c(exp(fit+1.96*se.fit)/(1+exp(fit+1.96*se.fit)),
rev(exp(fit-1.96*se.fit)/(1+exp(fit-1.96*se.fit)))),
col =  adjustcolor("dodgerblue", alpha.f = 0.10), border = NA))
with(mns_rank, lines(seq(2.5, 5, by=.25), prob, col="red"))
with(mns_rank, polygon(x = c(seq(2.5, 5, by=.25), rev(seq(2.5, 5, by=.25))),
y = c(asymp.LCL, rev(asymp.UCL)),
col =  adjustcolor("orangered", alpha.f = 0.10), border = NA))
with(mns_rank, legend(1, 95, legend=c("Line 1", "Line 2"),
col=c("red", "blue"))
# with(mns_rank, lines(seq(2.5, 5, by=.25), asymp.LCL, lwd=2, col="dodgerblue"))
# with(mns_rank, lines(seq(2.5, 5, by=.25), asymp.UCL, lwd=2, col="dodgerblue"))
print(cm)
ref.grid(adm_mod)
# Import My Data
my_data <- read.csv("data/juan_data.csv", stringsAsFactors = FALSE)
# Factorize Variables
my_data$status <- factor(my_data$status, levels=c("A", "U", "I"))
my_data$degree <- factor(my_data$degree, levels=c("Masters", "PhD"))
odds_two <- predict(adm_mod, newdata=my_data, se.fit=TRUE)
test_two$prediction_prob <- exp(odds_two$fit)/(exp(odds_two$fit) + 1)
mns_rank <- summary(lsmeans(adm_mod, "ranking",
at=list(ranking=seq(2.5, 5, 0.25)), type="response"))
# -------
# Predict
# -------
# Import My Data
my_data <- read.csv("data/juan_data.csv", stringsAsFactors = FALSE)
# Factorize Variables
my_data$status <- factor(my_data$status, levels=c("A", "U", "I"))
my_data$degree <- factor(my_data$degree, levels=c("Masters", "PhD"))
odds_two <- predict(adm_mod, newdata=my_data, se.fit=TRUE)
test_two$prediction_prob <- exp(odds_two$fit)/(exp(odds_two$fit) + 1)
mns_rank <- summary(lsmeans(adm_mod, "ranking",
at=list(ranking=seq(2.5, 5, 0.25)), type="response"))
with(test_one, plot(ranking, prediction_prob, type="n",
ylim=c(0, 1), ylab="P(Admission)", xlab="School Ranking", main="Probability of Admission vs School Ranking", panel.first = grid()))
with(odds_two, lines(seq(2.5, 5, by=.25), exp(fit)/(1+exp(fit)), col="blue"))
# with(odds_two, lines(seq(2.5, 5, by=.25), exp(fit+1.96*se.fit)/(1+exp(fit+1.96*se.fit)), lty=2))
# with(odds_two, lines(seq(2.5, 5, by=.25), exp(fit-1.96*se.fit)/(1+exp(fit-1.96*se.fit)), lty=2))
with(odds_two, polygon(x = c(seq(2.5, 5, by=.25), rev(seq(2.5, 5, by=.25))),
y = c(exp(fit+1.96*se.fit)/(1+exp(fit+1.96*se.fit)),
rev(exp(fit-1.96*se.fit)/(1+exp(fit-1.96*se.fit)))),
col =  adjustcolor("dodgerblue", alpha.f = 0.10), border = NA))
with(mns_rank, lines(seq(2.5, 5, by=.25), prob, col="red"))
with(mns_rank, polygon(x = c(seq(2.5, 5, by=.25), rev(seq(2.5, 5, by=.25))),
y = c(asymp.LCL, rev(asymp.UCL)),
col =  adjustcolor("orangered", alpha.f = 0.10), border = NA))
# with(mns_rank, lines(seq(2.5, 5, by=.25), asymp.LCL, lwd=2, col="dodgerblue"))
# with(mns_rank, lines(seq(2.5, 5, by=.25), asymp.UCL, lwd=2, col="dodgerblue"))
# -------
# Predict
# -------
# Import My Data
my_data <- read.csv("data/juan_data.csv", stringsAsFactors = FALSE)
# Factorize Variables
my_data$status <- factor(my_data$status, levels=c("A", "U", "I"))
my_data$degree <- factor(my_data$degree, levels=c("Masters", "PhD"))
my_odds <- predict(adm_mod, newdata=my_data, se.fit=TRUE)
test_two$prediction_prob <- exp(my_odds$fit)/(exp(my_odds$fit) + 1)
mns_rank <- summary(lsmeans(adm_mod, "ranking",
at=list(ranking=seq(2.5, 5, 0.25)), type="response"))
with(test_one, plot(ranking, prediction_prob, type="n",
ylim=c(0, 1), ylab="P(Admission)", xlab="School Ranking", main="Probability of Admission vs School Ranking", panel.first = grid()))
with(my_odds, lines(seq(2.5, 5, by=.25), exp(fit)/(1+exp(fit)), col="blue"))
# with(my_odds, lines(seq(2.5, 5, by=.25), exp(fit+1.96*se.fit)/(1+exp(fit+1.96*se.fit)), lty=2))
# with(my_odds, lines(seq(2.5, 5, by=.25), exp(fit-1.96*se.fit)/(1+exp(fit-1.96*se.fit)), lty=2))
with(my_odds, polygon(x = c(seq(2.5, 5, by=.25), rev(seq(2.5, 5, by=.25))),
y = c(exp(fit+1.96*se.fit)/(1+exp(fit+1.96*se.fit)),
rev(exp(fit-1.96*se.fit)/(1+exp(fit-1.96*se.fit)))),
col =  adjustcolor("dodgerblue", alpha.f = 0.10), border = NA))
with(mns_rank, lines(seq(2.5, 5, by=.25), prob, col="red"))
with(mns_rank, polygon(x = c(seq(2.5, 5, by=.25), rev(seq(2.5, 5, by=.25))),
y = c(asymp.LCL, rev(asymp.UCL)),
col =  adjustcolor("orangered", alpha.f = 0.10), border = NA))
# with(mns_rank, lines(seq(2.5, 5, by=.25), asymp.LCL, lwd=2, col="dodgerblue"))
# with(mns_rank, lines(seq(2.5, 5, by=.25), asymp.UCL, lwd=2, col="dodgerblue"))
# -------
# Predict
# -------
# Import My Data
my_data <- read.csv("data/juan_data.csv", stringsAsFactors = FALSE)
# Factorize Variables
my_data$status <- factor(my_data$status, levels=c("A", "U", "I"))
my_data$degree <- factor(my_data$degree, levels=c("Masters", "PhD"))
# Predict Odds of Admission based on my scores
my_odds <- predict(adm_mod, newdata=my_data, se.fit=TRUE)
my_data$prediction_prob <- exp(my_odds$fit)/(exp(my_odds$fit) + 1)
# Admission Probability for avg applicant
mns_rank <- summary(lsmeans(adm_mod, "ranking",
at=list(ranking=seq(2.5, 5, 0.25)), type="response"))
with(my_data, plot(ranking, prediction_prob, type="n",
ylim=c(0, 1), ylab="P(Admission)", xlab="School Ranking", main="Probability of Admission vs School Ranking", panel.first = grid()))
with(my_odds, lines(seq(2.5, 5, by=.25), exp(fit)/(1+exp(fit)), col="blue"))
# with(my_odds, lines(seq(2.5, 5, by=.25), exp(fit+1.96*se.fit)/(1+exp(fit+1.96*se.fit)), lty=2))
# with(my_odds, lines(seq(2.5, 5, by=.25), exp(fit-1.96*se.fit)/(1+exp(fit-1.96*se.fit)), lty=2))
with(my_odds, polygon(x = c(seq(2.5, 5, by=.25), rev(seq(2.5, 5, by=.25))),
y = c(exp(fit+1.96*se.fit)/(1+exp(fit+1.96*se.fit)),
rev(exp(fit-1.96*se.fit)/(1+exp(fit-1.96*se.fit)))),
col =  adjustcolor("dodgerblue", alpha.f = 0.10), border = NA))
with(mns_rank, lines(seq(2.5, 5, by=.25), prob, col="red"))
with(mns_rank, polygon(x = c(seq(2.5, 5, by=.25), rev(seq(2.5, 5, by=.25))),
y = c(asymp.LCL, rev(asymp.UCL)),
col =  adjustcolor("orangered", alpha.f = 0.10), border = NA))
# with(mns_rank, lines(seq(2.5, 5, by=.25), asymp.LCL, lwd=2, col="dodgerblue"))
# with(mns_rank, lines(seq(2.5, 5, by=.25), asymp.UCL, lwd=2, col="dodgerblue"))
# --------------
# Model Accuracy
# --------------
# Bring in new test data:
admission_test <- adm_data[501:600, ]
# Check test data
table(admission_test$decision)
table(admission_test$status)
hist(admission_test$gretot)
# Predict Admission
odds <- exp(predict(adm_mod, admission_test))
admission_test <- data.frame(admission_test, admission_model=odds/(odds+1))
admission_test$prediction[admission_test$admission_model > 0.5] <- "Accepted"
admission_test$prediction[admission_test$admission_model <= 0.5] <- "Rejected"
# Accuracy
accuracy <- sum(admission_test$prediction == admission_test$decision) / length(admission_test$prediction)
# Accuracy Evaluation of nn model with a confusion matrix
cm <- table(admission_test$decision, admission_test$prediction)
cat("\nConfusion matrix for resulting nn model is: \n")
print(cm)
precision <- 45 / (45 + 21)
recall <- 45 / (45 + 8)
F1 <- 2 * (precision*recall) / (precision + recall)
# ----------
# More Plots
# ----------
summary(adm_mod)
ref.grid(adm_mod)
# Look at ranges...
summary(g_admission)
# Predict for Status
mns <- summary(lsmeans(adm_mod, "status", type="response"))
# Graph Status
library(ggplot2)
ggplot(mns, aes(x=status, y=prob)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=asymp.LCL, ymax=asymp.UCL), width=0.2) +
theme_bw()
# Predict for GPA
library(lsmeans)
adm_mns_gpa <- summary(lsmeans(adm_mod, "gpafin",
at=list(gpafin = seq(2, 4, 0.1)), type="response"))
# Graph GPA
g <- simpleScatter(g_admission, gpafin, decision_bin, title="Probability of Admission v. GPA",
xlab="GPA", ylab="P(Admission)")
g +
geom_line(data=adm_mns_gpa, aes(x=gpafin, y=prob), color="red") +
geom_line(data=adm_mns_gpa, aes(x=gpafin, y=asymp.LCL), linetype="dashed") +
geom_line(data=adm_mns_gpa, aes(x=gpafin, y=asymp.UCL), linetype="dashed")
# Predict for GRE Verbal
adm_mns_grev <- summary(lsmeans(adm_mod, "grev",
at=list(grev = seq(135, 170, 1)), type="response"))
# Graph GRE Verbal
g1 <- simpleScatter(g_admission, grev, decision_bin, title="Probability of Admission v. GRE Verbal Score",
xlab="GRE Verbal", ylab="P(Admission)")
g1 +
geom_line(data=adm_mns_grev, aes(x=grev, y=prob), color="red") +
geom_line(data=adm_mns_grev, aes(x=grev, y=asymp.LCL), linetype="dashed") +
geom_line(data=adm_mns_grev, aes(x=grev, y=asymp.UCL), linetype="dashed")
# Predict for GRE Math
adm_mns_grem <- summary(lsmeans(adm_mod, "grem",
at=list(grem = seq(141, 170, 1)), type="response"))
# Graph GRE Math
g2 <- simpleScatter(g_admission, grem, decision_bin, title="Probability of Admission v. GRE Math Score",
xlab="GRE Verbal", ylab="P(Admission)")
g2 +
geom_line(data=adm_mns_grem, aes(x=grem, y=prob), color="red") +
geom_line(data=adm_mns_grem, aes(x=grem, y=asymp.LCL), linetype="dashed") +
geom_line(data=adm_mns_grem, aes(x=grem, y=asymp.UCL), linetype="dashed")
# Predict for Ranking
adm_mns_rank <- summary(lsmeans(adm_mod, "ranking",
at=list(ranking=seq(2.2, 5, 0.1)), type="response"))
# Graph Ranking
g3 <- simpleScatter(g_admission, ranking, decision_bin, title="Probability of Admission v. School Ranking",
xlab="Ranking", ylab="P(Admission)")
g3 +
geom_line(data=adm_mns_rank, aes(x=ranking, y=prob), color="red") +
geom_line(data=adm_mns_rank, aes(x=ranking, y=asymp.LCL), linetype="dashed") +
geom_line(data=adm_mns_rank, aes(x=ranking, y=asymp.UCL), linetype="dashed")
# ---------------------
# Preliminary Analysis
# ---------------------
library(SDSRegressionR)
# Import data
adm_data <- read.csv("data/cs_data.csv", stringsAsFactors = FALSE)
# Add new column with binary decision values (0/1)
adm_data$decision_bin <- NA
adm_data$decision_bin[adm_data$decision == "Rejected"] <- 0
adm_data$decision_bin[adm_data$decision == "Accepted"] <- 1
# Factorize Variables
table(adm_data$decision)
adm_data$decision <- factor(adm_data$decision, levels=c("Rejected","Accepted"))
table(adm_data$status)
adm_data$status <- factor(adm_data$status, levels=c("A", "U", "I"))
table(adm_data$degree)
adm_data$degree <- factor(adm_data$degree, levels=c("Masters", "PhD"))
admission <- adm_data[1:500, ]
names(admission)
# Summary
library(psych)
describe(admission)
# Data check
count(admission$decision)
count(admission$degree)
count(admission$status)
hist(admission$ranking)
hist(admission$year)
hist(admission$gpafin)
hist(admission$gretot)
# Intital Model
adm_mod_0 <- glm(decision ~ gpafin + grev + grem + grew + status + degree + ranking, data=admission, family="binomial")
summary(adm_mod_0)
# Assumption Check
library(car)
vif(adm_mod_0)
cooksPlot(adm_mod_0, key.variable = "id", print.obs = TRUE, sort.obs = TRUE)
threeOuts(adm_mod_0, key.variable = "id")
# Remove outliers
"%not in%" <- Negate("%in%")
g_admission <- admission[admission$id %not in% c('77'),]
# -----------------
# In-Depth Analysis
# -----------------
# Re-run
adm_mod <- glm(decision ~ gpafin + grev + grem + grew + status + degree + ranking, data=g_admission, family="binomial")
summary(adm_mod)
confint.default(adm_mod)
# Odds-ratios
library(oddsratio)
incr <- list(gpafin=.5, grev=5, grem=5, grew=.5, status=1, degree=1, ranking=.5)
or_glm(data=g_admission, adm_mod, incr=incr , CI = 0.95)
# Stats
library(rms)
adm_mod_2 <- lrm(decision ~ gpafin + grev + grem + grew + status + degree + ranking, g_admission)
adm_mod_2
# Pseudo R2
library(DescTools)
PseudoR2(adm_mod, which = "Nagelkerke")
# Test the full categorical variable
library(car)
Anova(adm_mod, type="III")
# Post-hoc testing
library(lsmeans)
lsmeans(adm_mod, "status", type="response")
pairs(lsmeans(adm_mod, "status"), reverse=TRUE, adjust="none")
ref.grid(adm_mod)
# ----------
# More Plots
# ----------
summary(adm_mod)
ref.grid(adm_mod)
# Look at ranges...
summary(g_admission)
# Predict for Status
mns <- summary(lsmeans(adm_mod, "status", type="response"))
# Graph Status
library(ggplot2)
ggplot(mns, aes(x=status, y=prob)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=asymp.LCL, ymax=asymp.UCL), width=0.2) +
theme_bw()
# Predict for GPA
library(lsmeans)
adm_mns_gpa <- summary(lsmeans(adm_mod, "gpafin",
at=list(gpafin = seq(2, 4, 0.1)), type="response"))
# Graph GPA
g <- simpleScatter(g_admission, gpafin, decision_bin, title="Probability of Admission v. GPA",
xlab="GPA", ylab="P(Admission)")
g +
geom_line(data=adm_mns_gpa, aes(x=gpafin, y=prob), color="red") +
geom_line(data=adm_mns_gpa, aes(x=gpafin, y=asymp.LCL), linetype="dashed") +
geom_line(data=adm_mns_gpa, aes(x=gpafin, y=asymp.UCL), linetype="dashed")
# Predict for GRE Verbal
adm_mns_grev <- summary(lsmeans(adm_mod, "grev",
at=list(grev = seq(135, 170, 1)), type="response"))
# Graph GRE Verbal
g1 <- simpleScatter(g_admission, grev, decision_bin, title="Probability of Admission v. GRE Verbal Score",
xlab="GRE Verbal", ylab="P(Admission)")
g1 +
geom_line(data=adm_mns_grev, aes(x=grev, y=prob), color="red") +
geom_line(data=adm_mns_grev, aes(x=grev, y=asymp.LCL), linetype="dashed") +
geom_line(data=adm_mns_grev, aes(x=grev, y=asymp.UCL), linetype="dashed")
# Predict for GRE Math
adm_mns_grem <- summary(lsmeans(adm_mod, "grem",
at=list(grem = seq(141, 170, 1)), type="response"))
# Graph GRE Math
g2 <- simpleScatter(g_admission, grem, decision_bin, title="Probability of Admission v. GRE Math Score",
xlab="GRE Verbal", ylab="P(Admission)")
g2 +
geom_line(data=adm_mns_grem, aes(x=grem, y=prob), color="red") +
geom_line(data=adm_mns_grem, aes(x=grem, y=asymp.LCL), linetype="dashed") +
geom_line(data=adm_mns_grem, aes(x=grem, y=asymp.UCL), linetype="dashed")
# Predict for Ranking
adm_mns_rank <- summary(lsmeans(adm_mod, "ranking",
at=list(ranking=seq(2.2, 5, 0.1)), type="response"))
# Graph Ranking
g3 <- simpleScatter(g_admission, ranking, decision_bin, title="Probability of Admission v. School Ranking",
xlab="Ranking", ylab="P(Admission)")
g3 +
geom_line(data=adm_mns_rank, aes(x=ranking, y=prob), color="red") +
geom_line(data=adm_mns_rank, aes(x=ranking, y=asymp.LCL), linetype="dashed") +
geom_line(data=adm_mns_rank, aes(x=ranking, y=asymp.UCL), linetype="dashed")
---
title: "Graduate Admission Analysis"
author: "Juan Trejo"
date: "May 8, 2018"
output: html_document
---
The following code was used to examine how GRE, GPA, applicant status,
degree sought and school ranking effect the likelihood of an applicant being
accepted to her graduate school of interest.
```{r}
# ---------------------
# Preliminary Analysis
# ---------------------
library(SDSRegressionR)
# Import data
adm_data <- read.csv("data/cs_data.csv", stringsAsFactors = FALSE)
# Add new column with binary decision values (0/1)
adm_data$decision_bin <- NA
adm_data$decision_bin[adm_data$decision == "Rejected"] <- 0
adm_data$decision_bin[adm_data$decision == "Accepted"] <- 1
# Factorize Variables
table(adm_data$decision)
adm_data$decision <- factor(adm_data$decision, levels=c("Rejected","Accepted"))
table(adm_data$status)
adm_data$status <- factor(adm_data$status, levels=c("A", "U", "I"))
table(adm_data$degree)
adm_data$degree <- factor(adm_data$degree, levels=c("Masters", "PhD"))
admission <- adm_data[1:500, ]
names(admission)
# Summary
library(psych)
describe(admission)
# Data check
count(admission$decision)
count(admission$degree)
count(admission$status)
hist(admission$ranking)
hist(admission$year)
hist(admission$gpafin)
hist(admission$gretot)
# Intital Model
adm_mod_0 <- glm(decision ~ gpafin + grev + grem + grew + status + degree + ranking, data=admission, family="binomial")
summary(adm_mod_0)
# Assumption Check
library(car)
vif(adm_mod_0)
cooksPlot(adm_mod_0, key.variable = "id", print.obs = TRUE, sort.obs = TRUE)
threeOuts(adm_mod_0, key.variable = "id")
# Remove outliers
"%not in%" <- Negate("%in%")
g_admission <- admission[admission$id %not in% c('77'),]
```
```{r}
# -----------------
# In-Depth Analysis
# -----------------
# Re-run
adm_mod <- glm(decision ~ gpafin + grev + grem + grew + status + degree + ranking, data=g_admission, family="binomial")
summary(adm_mod)
confint.default(adm_mod)
# Odds-ratios
library(oddsratio)
incr <- list(gpafin=.5, grev=5, grem=5, grew=.5, status=1, degree=1, ranking=.5)
or_glm(data=g_admission, adm_mod, incr=incr , CI = 0.95)
# Stats
library(rms)
adm_mod_2 <- lrm(decision ~ gpafin + grev + grem + grew + status + degree + ranking, g_admission)
adm_mod_2
# Pseudo R2
library(DescTools)
PseudoR2(adm_mod, which = "Nagelkerke")
# Test the full categorical variable
library(car)
Anova(adm_mod, type="III")
# Post-hoc testing
library(lsmeans)
lsmeans(adm_mod, "status", type="response")
pairs(lsmeans(adm_mod, "status"), reverse=TRUE, adjust="none")
```
```{r}
# --------------
# Model Accuracy
# --------------
# Bring in new test data:
admission_test <- adm_data[501:600, ]
# Check test data
table(admission_test$decision)
table(admission_test$status)
hist(admission_test$gretot)
# Predict Admission
odds <- exp(predict(adm_mod, admission_test))
admission_test <- data.frame(admission_test, admission_model=odds/(odds+1))
admission_test$prediction[admission_test$admission_model > 0.5] <- "Accepted"
admission_test$prediction[admission_test$admission_model <= 0.5] <- "Rejected"
# Accuracy
accuracy <- sum(admission_test$prediction == admission_test$decision) / length(admission_test$prediction)
# Accuracy Evaluation of nn model with a confusion matrix
cm <- table(admission_test$decision, admission_test$prediction)
cat("\nConfusion matrix for resulting nn model is: \n")
print(cm)
precision <- 45 / (45 + 21)
recall <- 45 / (45 + 8)
F1 <- 2 * (precision*recall) / (precision + recall)
```
```{r}
# -------
# Predict
# -------
# Import My Data
my_data <- read.csv("data/juan_data.csv", stringsAsFactors = FALSE)
# Factorize Variables
my_data$status <- factor(my_data$status, levels=c("A", "U", "I"))
my_data$degree <- factor(my_data$degree, levels=c("Masters", "PhD"))
# Predict Odds of Admission based on my scores
my_odds <- predict(adm_mod, newdata=my_data, se.fit=TRUE)
my_data$prediction_prob <- exp(my_odds$fit)/(exp(my_odds$fit) + 1)
# Admission Probability for avg applicant
mns_rank <- summary(lsmeans(adm_mod, "ranking",
at=list(ranking=seq(2.5, 5, 0.25)), type="response"))
# Plot
with(my_data, plot(ranking, prediction_prob, type="n",
ylim=c(0, 1), ylab="P(Admission)", xlab="School Ranking", main="Probability of Admission vs School Ranking", panel.first = grid()))
# Add my probability
with(my_odds, lines(seq(2.5, 5, by=.25), exp(fit)/(1+exp(fit)), col="blue"))
# Add Prediction Interval
with(my_odds, polygon(x = c(seq(2.5, 5, by=.25), rev(seq(2.5, 5, by=.25))),
y = c(exp(fit+1.96*se.fit)/(1+exp(fit+1.96*se.fit)),
rev(exp(fit-1.96*se.fit)/(1+exp(fit-1.96*se.fit)))),
col =  adjustcolor("dodgerblue", alpha.f = 0.10), border = NA))
# Add avg applicant's probability
with(mns_rank, lines(seq(2.5, 5, by=.25), prob, col="red"))
# Add Confidence interval
with(mns_rank, polygon(x = c(seq(2.5, 5, by=.25), rev(seq(2.5, 5, by=.25))),
y = c(asymp.LCL, rev(asymp.UCL)),
col =  adjustcolor("orangered", alpha.f = 0.10), border = NA))
# with(mns_rank, lines(seq(2.5, 5, by=.25), asymp.LCL, lwd=2, col="dodgerblue"))
# with(mns_rank, lines(seq(2.5, 5, by=.25), asymp.UCL, lwd=2, col="dodgerblue"))
```
```{r}
# ----------
# More Plots
# ----------
summary(adm_mod)
ref.grid(adm_mod)
# Look at ranges...
summary(g_admission)
# Predict for Status
mns <- summary(lsmeans(adm_mod, "status", type="response"))
# Graph Status
library(ggplot2)
ggplot(mns, aes(x=status, y=prob)) +
geom_bar(stat="identity") +
geom_errorbar(aes(ymin=asymp.LCL, ymax=asymp.UCL), width=0.2) +
theme_bw()
# Predict for GPA
library(lsmeans)
adm_mns_gpa <- summary(lsmeans(adm_mod, "gpafin",
at=list(gpafin = seq(2, 4, 0.1)), type="response"))
# Graph GPA
g <- simpleScatter(g_admission, gpafin, decision_bin, title="Probability of Admission v. GPA",
xlab="GPA", ylab="P(Admission)")
g +
geom_line(data=adm_mns_gpa, aes(x=gpafin, y=prob), color="red") +
geom_line(data=adm_mns_gpa, aes(x=gpafin, y=asymp.LCL), linetype="dashed") +
geom_line(data=adm_mns_gpa, aes(x=gpafin, y=asymp.UCL), linetype="dashed")
# Predict for GRE Verbal
adm_mns_grev <- summary(lsmeans(adm_mod, "grev",
at=list(grev = seq(135, 170, 1)), type="response"))
# Graph GRE Verbal
g1 <- simpleScatter(g_admission, grev, decision_bin, title="Probability of Admission v. GRE Verbal Score",
xlab="GRE Verbal", ylab="P(Admission)")
g1 +
geom_line(data=adm_mns_grev, aes(x=grev, y=prob), color="red") +
geom_line(data=adm_mns_grev, aes(x=grev, y=asymp.LCL), linetype="dashed") +
geom_line(data=adm_mns_grev, aes(x=grev, y=asymp.UCL), linetype="dashed")
# Predict for GRE Math
adm_mns_grem <- summary(lsmeans(adm_mod, "grem",
at=list(grem = seq(141, 170, 1)), type="response"))
# Graph GRE Math
g2 <- simpleScatter(g_admission, grem, decision_bin, title="Probability of Admission v. GRE Math Score",
xlab="GRE Verbal", ylab="P(Admission)")
g2 +
geom_line(data=adm_mns_grem, aes(x=grem, y=prob), color="red") +
geom_line(data=adm_mns_grem, aes(x=grem, y=asymp.LCL), linetype="dashed") +
geom_line(data=adm_mns_grem, aes(x=grem, y=asymp.UCL), linetype="dashed")
# Predict for Ranking
adm_mns_rank <- summary(lsmeans(adm_mod, "ranking",
at=list(ranking=seq(2.2, 5, 0.1)), type="response"))
# Graph Ranking
g3 <- simpleScatter(g_admission, ranking, decision_bin, title="Probability of Admission v. School Ranking",
xlab="Ranking", ylab="P(Admission)")
g3 +
geom_line(data=adm_mns_rank, aes(x=ranking, y=prob), color="red") +
geom_line(data=adm_mns_rank, aes(x=ranking, y=asymp.LCL), linetype="dashed") +
geom_line(data=adm_mns_rank, aes(x=ranking, y=asymp.UCL), linetype="dashed")
```
# Graph GRE Math
g2 <- simpleScatter(g_admission, grem, decision_bin, title="Probability of Admission v. GRE Math Score",
xlab="GRE Math", ylab="P(Admission)")
g2 +
geom_line(data=adm_mns_grem, aes(x=grem, y=prob), color="red") +
geom_line(data=adm_mns_grem, aes(x=grem, y=asymp.LCL), linetype="dashed") +
geom_line(data=adm_mns_grem, aes(x=grem, y=asymp.UCL), linetype="dashed")
